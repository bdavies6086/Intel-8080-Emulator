import { read, readArg, write } from "../../memory";
import { ConditionBits, Register, RegisterKeys } from "../types";
import { add16Bit, add8Bit, addWithCarry, and, cma, cmc, dcx, inr, inx, or, ral, rar, rlc, rrc, sub8Bit, subWithCarry, xor } from "./arithmetic";
import { ca, cc, cm, cnc, cnz, cp, cpe, cpo, cz, jc, jm, jnc, jnz, jp, jpe, jpo, jz, rc, ret, rm, rnc, rnz, rp, rpe, rpo, rst0, rst1, rst2, rst3, rst4, rst5, rst6, rst7, rz } from "./calls";
import { assignToRegister, assignToRegister16, lda, lhld, lxi, mov, readRegister16, readRegister8, shld, sta, stax, xchg } from "./register";
import { input, out } from "./special";
import { pop, popPsw, push, pushPsw, xthl } from "./stack";

type Operation = {
    op: () => void,
    handlesPc: boolean,
    size: number
}

type Operations = Record<string, Operation>

const noop = () => {};

export const buildOperations = (register: Register, conditionBits: ConditionBits, enableInterrupts: { value: boolean }): Operations => ({
    "00": { size: 1, handlesPc: false, op: noop },
    "01": { size: 3, handlesPc: false, op: lxi(register, RegisterKeys.B, RegisterKeys.C) },
    "02": { size: 1, handlesPc: false, op: stax(register, RegisterKeys.B, RegisterKeys.C) },
    "03": { size: 1, handlesPc: false, op: inx(register, RegisterKeys.B, RegisterKeys.C)},
    "04": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.B)(inr(conditionBits)(register[RegisterKeys.B], "0x1"))},
    "05": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.B)(inr(conditionBits)(register[RegisterKeys.B], "-0x1"))},
    "06": { size: 2, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.B)(readArg(register))},
    "07": { size: 1, handlesPc: false, op: rlc(conditionBits, register)},
    "08": { size: 1, handlesPc: false, op: noop},
    "09": { size: 1, handlesPc: false, op: () => assignToRegister16(register, RegisterKeys.H, RegisterKeys.L)(add16Bit(conditionBits)(register[RegisterKeys.H] + register[RegisterKeys.L], register[RegisterKeys.B] + register[RegisterKeys.C]))},
    "0a": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(read(register[RegisterKeys.B] + register[RegisterKeys.C]))},
    "0b": { size: 1, handlesPc: false, op: () => assignToRegister16(register, RegisterKeys.B, RegisterKeys.C)(dcx(conditionBits)(register[RegisterKeys.B] + register[RegisterKeys.C], "0x1"))},
    "0c": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.C)(inr(conditionBits)(register[RegisterKeys.C], "0x1"))},
    "0d": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.C)(inr(conditionBits)(register[RegisterKeys.C], "-0x1"))},
    "0e": { size: 2, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.C)(readArg(register))},
    "0f": { size: 1, handlesPc: false, op: rrc(conditionBits, register)},

    "10": { size: 1, handlesPc: false, op: noop },
    "11": { size: 3, handlesPc: false, op: lxi(register, RegisterKeys.D, RegisterKeys.E) },
    "12": { size: 1, handlesPc: false, op: stax(register, RegisterKeys.D, RegisterKeys.E) },
    "13": { size: 1, handlesPc: false, op: inx(register, RegisterKeys.D, RegisterKeys.E)},
    "14": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.D)(inr(conditionBits)(register[RegisterKeys.D], "0x1"))},
    "15": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.D)(inr(conditionBits)(register[RegisterKeys.D], "-0x1"))},
    "16": { size: 2, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.D)(readArg(register))},
    "17": { size: 1, handlesPc: false, op: ral(conditionBits, register)},
    "18": { size: 1, handlesPc: false, op: noop},
    "19": { size: 1, handlesPc: false, op: () => assignToRegister16(register, RegisterKeys.H, RegisterKeys.L)(add16Bit(conditionBits)(register[RegisterKeys.H] + register[RegisterKeys.L], register[RegisterKeys.D] + register[RegisterKeys.E]))},
    "1a": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(read(register[RegisterKeys.D] + register[RegisterKeys.E]))},
    "1b": { size: 1, handlesPc: false, op: () => assignToRegister16(register, RegisterKeys.D, RegisterKeys.E)(dcx(conditionBits)(register[RegisterKeys.D] + register[RegisterKeys.E], "0x1"))},
    "1c": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.E)(inr(conditionBits)(register[RegisterKeys.E], "0x1"))},
    "1d": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.E)(inr(conditionBits)(register[RegisterKeys.E], "-0x1"))},
    "1e": { size: 2, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.E)(readArg(register))},
    "1f": { size: 1, handlesPc: false, op: rar(conditionBits, register)},

    "20": { size: 1, handlesPc: false, op: noop },
    "21": { size: 3, handlesPc: false, op: lxi(register, RegisterKeys.H, RegisterKeys.L) },
    "22": { size: 3, handlesPc: false, op: shld(register)},
    "23": { size: 1, handlesPc: false, op: inx(register, RegisterKeys.H, RegisterKeys.L)},
    "24": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.H)(inr(conditionBits)(register[RegisterKeys.H], "0x1"))},
    "25": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.H)(inr(conditionBits)(register[RegisterKeys.H], "-0x1"))},
    "26": { size: 2, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.H)(readArg(register))},
    // DAA special op, not used in space invaders
    "27": { size: 1, handlesPc: false, op: noop},
    "28": { size: 1, handlesPc: false, op: noop},
    "29": { size: 1, handlesPc: false, op: () => assignToRegister16(register, RegisterKeys.H, RegisterKeys.L)(add16Bit(conditionBits)(register[RegisterKeys.H] + register[RegisterKeys.L], register[RegisterKeys.H] + register[RegisterKeys.L]))},
    "2a": { size: 3, handlesPc: false, op: lhld(register)},
    "2b": { size: 1, handlesPc: false, op: () => assignToRegister16(register, RegisterKeys.H, RegisterKeys.L)(dcx(conditionBits)(register[RegisterKeys.H] + register[RegisterKeys.L], "0x1"))},
    "2c": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.L)(inr(conditionBits)(register[RegisterKeys.L], "0x1"))},
    "2d": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.L)(inr(conditionBits)(register[RegisterKeys.L], "-0x1"))},
    "2e": { size: 2, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.L)(readArg(register))},
    "2f": { size: 1, handlesPc: false, op: cma(register)},

    "30": { size: 1, handlesPc: false, op: noop },
    "31": { size: 3, handlesPc: false, op: lxi(register, RegisterKeys.SP1, RegisterKeys.SP2) },
    "32": { size: 3, handlesPc: false, op: sta(register)},
    "33": { size: 1, handlesPc: false, op: inx(register, RegisterKeys.SP1, RegisterKeys.SP2)},
    "34": { size: 1, handlesPc: false, op: () => write(register[RegisterKeys.H] + register[RegisterKeys.L], inr(conditionBits)(read(register[RegisterKeys.H] + register[RegisterKeys.L]), "0x1"))},
    "35": { size: 1, handlesPc: false, op: () => write(register[RegisterKeys.H] + register[RegisterKeys.L], inr(conditionBits)(read(register[RegisterKeys.H] + register[RegisterKeys.L]), "-0x1"))},
    "36": { size: 2, handlesPc: false, op: () => write(register[RegisterKeys.H] + register[RegisterKeys.L], readArg(register))},
    "37": { size: 1, handlesPc: false, op: () => conditionBits.carry = true},
    "38": { size: 1, handlesPc: false, op: noop },
    "39": { size: 1, handlesPc: false, op: () => assignToRegister16(register, RegisterKeys.H, RegisterKeys.L)(add16Bit(conditionBits)(register[RegisterKeys.H] + register[RegisterKeys.L], register[RegisterKeys.SP1] + register[RegisterKeys.SP2]))},
    "3a": { size: 3, handlesPc: false, op: () => lda(register)},
    "3b": { size: 1, handlesPc: false, op: () => assignToRegister16(register, RegisterKeys.SP1, RegisterKeys.SP2)(dcx(conditionBits)(register[RegisterKeys.SP1] + register[RegisterKeys.SP2], "0x1"))},
    "3c": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(inr(conditionBits)(register[RegisterKeys.ACC], "0x1"))},
    "3d": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(inr(conditionBits)(register[RegisterKeys.ACC], "-0x1"))},
    "3e": { size: 2, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(readArg(register))},
    "3f": { size: 1, handlesPc: false, op: () => cmc(conditionBits)},

    // MOV
    "40": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.B, RegisterKeys.B)},
    "41": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.B, RegisterKeys.C)},
    "42": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.B, RegisterKeys.D)},
    "43": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.B, RegisterKeys.E)},
    "44": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.B, RegisterKeys.H)},
    "45": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.B, RegisterKeys.L)},
    "46": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.B)(read(register[RegisterKeys.H] + register[RegisterKeys.L]))},
    "47": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.B, RegisterKeys.ACC)},
    "48": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.C, RegisterKeys.B)},
    "49": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.C, RegisterKeys.C)},
    "4a": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.C, RegisterKeys.D)},
    "4b": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.C, RegisterKeys.E)},
    "4c": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.C, RegisterKeys.H)},
    "4d": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.C, RegisterKeys.L)},
    "4e": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.C)(read(register[RegisterKeys.H] + register[RegisterKeys.L]))},
    "4f": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.C, RegisterKeys.ACC)},

    "50": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.D, RegisterKeys.B)},
    "51": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.D, RegisterKeys.C)},
    "52": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.D, RegisterKeys.D)},
    "53": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.D, RegisterKeys.E)},
    "54": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.D, RegisterKeys.H)},
    "55": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.D, RegisterKeys.L)},
    "56": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.D)(read(register[RegisterKeys.H] + register[RegisterKeys.L]))},
    "57": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.D, RegisterKeys.ACC)},

    "58": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.E, RegisterKeys.B)},
    "59": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.E, RegisterKeys.C)},
    "5a": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.E, RegisterKeys.D)},
    "5b": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.E, RegisterKeys.E)},
    "5c": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.E, RegisterKeys.H)},
    "5d": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.E, RegisterKeys.L)},
    "5e": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.E)(read(register[RegisterKeys.H] + register[RegisterKeys.L]))},
    "5f": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.E, RegisterKeys.ACC)},

    "60": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.H, RegisterKeys.B)},
    "61": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.H, RegisterKeys.C)},
    "62": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.H, RegisterKeys.D)},
    "63": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.H, RegisterKeys.E)},
    "64": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.H, RegisterKeys.H)},
    "65": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.H, RegisterKeys.L)},
    "66": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.H)(read(register[RegisterKeys.H] + register[RegisterKeys.L]))},
    "67": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.H, RegisterKeys.ACC)},

    "68": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.L, RegisterKeys.B)},
    "69": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.L, RegisterKeys.C)},
    "6a": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.L, RegisterKeys.D)},
    "6b": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.L, RegisterKeys.E)},
    "6c": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.L, RegisterKeys.H)},
    "6d": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.L, RegisterKeys.L)},
    "6e": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.L)(read(register[RegisterKeys.H] + register[RegisterKeys.L]))},
    "6f": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.L, RegisterKeys.ACC)},

    "70": { size: 1, handlesPc: false, op: () => write(register[RegisterKeys.H] + register[RegisterKeys.L], readRegister8(register, RegisterKeys.B)) },
    "71": { size: 1, handlesPc: false, op: () => write(register[RegisterKeys.H] + register[RegisterKeys.L], readRegister8(register, RegisterKeys.C)) },
    "72": { size: 1, handlesPc: false, op: () => write(register[RegisterKeys.H] + register[RegisterKeys.L], readRegister8(register, RegisterKeys.D)) },
    "73": { size: 1, handlesPc: false, op: () => write(register[RegisterKeys.H] + register[RegisterKeys.L], readRegister8(register, RegisterKeys.E)) },
    "74": { size: 1, handlesPc: false, op: () => write(register[RegisterKeys.H] + register[RegisterKeys.L], readRegister8(register, RegisterKeys.H)) },
    "75": { size: 1, handlesPc: false, op: () => write(register[RegisterKeys.H] + register[RegisterKeys.L], readRegister8(register, RegisterKeys.L)) },
    // "76" HLT?
    "76": { size: 1, handlesPc: false, op: noop},
    "77": { size: 1, handlesPc: false, op: () => write(register[RegisterKeys.H] + register[RegisterKeys.L], readRegister8(register, RegisterKeys.ACC)) }, 
    
    "78": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.ACC, RegisterKeys.B)},
    "79": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.ACC, RegisterKeys.C)},
    "7a": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.ACC, RegisterKeys.D)},
    "7b": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.ACC, RegisterKeys.E)},
    "7c": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.ACC, RegisterKeys.H)},
    "7d": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.ACC, RegisterKeys.L)},
    "7e": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(read(register[RegisterKeys.H] + register[RegisterKeys.L]))},
    "7f": { size: 1, handlesPc: false, op: mov(register, RegisterKeys.ACC, RegisterKeys.ACC)},

    // ADD
    "80": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(add8Bit(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.B)))},
    "81": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(add8Bit(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.C)))},
    "82": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(add8Bit(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.D)))},
    "83": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(add8Bit(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.E)))},
    "84": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(add8Bit(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.H)))},
    "85": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(add8Bit(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.L)))},
    "86": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(add8Bit(conditionBits)(readRegister8(register, RegisterKeys.ACC), read(register[RegisterKeys.H] + register[RegisterKeys.L])))},
    "87": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(add8Bit(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.ACC)))},

    // ADD WITH CARRY
    "88": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(addWithCarry(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.B)))},
    "89": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(addWithCarry(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.C)))},
    "8a": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(addWithCarry(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.D)))},
    "8b": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(addWithCarry(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.E)))},
    "8c": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(addWithCarry(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.H)))},
    "8d": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(addWithCarry(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.L)))},
    "8e": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(addWithCarry(conditionBits)(readRegister8(register, RegisterKeys.ACC), read(register[RegisterKeys.H] + register[RegisterKeys.L])))},
    "8f": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(addWithCarry(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.ACC)))},

    // SUB
    "90": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(sub8Bit(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.B)))},
    "91": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(sub8Bit(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.C)))},
    "92": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(sub8Bit(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.D)))},
    "93": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(sub8Bit(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.E)))},
    "94": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(sub8Bit(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.H)))},
    "95": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(sub8Bit(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.L)))},
    "96": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(sub8Bit(conditionBits)(readRegister8(register, RegisterKeys.ACC), read(register[RegisterKeys.H] + register[RegisterKeys.L])))},
    "97": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(sub8Bit(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.ACC)))},

    // SUB WITH CARRY
    "98": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(subWithCarry(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.B)))},
    "99": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(subWithCarry(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.C)))},
    "9a": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(subWithCarry(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.D)))},
    "9b": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(subWithCarry(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.E)))},
    "9c": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(subWithCarry(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.H)))},
    "9d": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(subWithCarry(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.L)))},
    "9e": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(subWithCarry(conditionBits)(readRegister8(register, RegisterKeys.ACC), read(register[RegisterKeys.H] + register[RegisterKeys.L])))},
    "9f": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(subWithCarry(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.ACC)))},

    // AND
    "a0": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(and(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.B)))},
    "a1": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(and(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.C)))},
    "a2": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(and(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.D)))},
    "a3": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(and(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.E)))},
    "a4": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(and(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.H)))},
    "a5": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(and(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.L)))},
    "a6": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(and(conditionBits)(readRegister8(register, RegisterKeys.ACC), read(register[RegisterKeys.H] + register[RegisterKeys.L])))},
    "a7": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(and(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.ACC)))},

    // XOR
    "a8": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(xor(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.B)))},
    "a9": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(xor(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.C)))},
    "aa": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(xor(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.D)))},
    "ab": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(xor(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.E)))},
    "ac": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(xor(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.H)))},
    "ad": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(xor(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.L)))},
    "ae": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(xor(conditionBits)(readRegister8(register, RegisterKeys.ACC), read(register[RegisterKeys.H] + register[RegisterKeys.L])))},
    "af": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(xor(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.ACC)))},

    // OR
    "b0": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(or(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.B)))},
    "b1": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(or(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.C)))},
    "b2": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(or(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.D)))},
    "b3": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(or(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.E)))},
    "b4": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(or(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.H)))},
    "b5": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(or(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.L)))},
    "b6": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(or(conditionBits)(readRegister8(register, RegisterKeys.ACC), read(register[RegisterKeys.H] + register[RegisterKeys.L])))},
    "b7": { size: 1, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(or(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.ACC)))},

    // CMP
    "b8": { size: 1, handlesPc: false, op: () => sub8Bit(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.B))},
    "b9": { size: 1, handlesPc: false, op: () => sub8Bit(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.C))},
    "ba": { size: 1, handlesPc: false, op: () => sub8Bit(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.D))},
    "bb": { size: 1, handlesPc: false, op: () => sub8Bit(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.E))},
    "bc": { size: 1, handlesPc: false, op: () => sub8Bit(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.H))},
    "bd": { size: 1, handlesPc: false, op: () => sub8Bit(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.L))},
    "be": { size: 1, handlesPc: false, op: () => sub8Bit(conditionBits)(readRegister8(register, RegisterKeys.ACC), read(register[RegisterKeys.H] + register[RegisterKeys.L]))},
    "bf": { size: 1, handlesPc: false, op: () => sub8Bit(conditionBits)(readRegister8(register, RegisterKeys.ACC), readRegister8(register, RegisterKeys.ACC))},

    "c0": { size: 1, handlesPc: true, op: () => rnz(register, conditionBits)},
    "c1": { size: 1, handlesPc: false, op: () => pop(register, RegisterKeys.B, RegisterKeys.C) },
    "c2": { size: 3, handlesPc: true, op: () => jnz(register, conditionBits) },
    "c3": { size: 3, handlesPc: true, op: () => jp(register, conditionBits) },
    "c4": { size: 3, handlesPc: true, op: () => cnz(register, conditionBits) },
    "c5": { size: 1, handlesPc: false, op: () => push(register, RegisterKeys.B, RegisterKeys.C)},
    "c6": { size: 2, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(add8Bit(conditionBits)(register[RegisterKeys.ACC], readArg(register)))},
    "c7": { size: 1, handlesPc: false, op: () => rst0(register, enableInterrupts)},
    "c8": { size: 1, handlesPc: true, op: () => rz(register, conditionBits)},
    "c9": { size: 1, handlesPc: true, op: () => ret(register, conditionBits)},
    "ca": { size: 3, handlesPc: true, op: () => jz(register, conditionBits)},
    "cb": { size: 3, handlesPc: true, op: () => jp(register, conditionBits) },
    "cc": { size: 3, handlesPc: true, op: () => cz(register, conditionBits)},
    "cd": { size: 3, handlesPc: true, op: () => ca(register, conditionBits)},
    "ce": { size: 2, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(addWithCarry(conditionBits)(register[RegisterKeys.ACC], readArg(register)))},
    "cf": { size: 1, handlesPc: true, op: () => rst1(register, enableInterrupts)},

    "d0": { size: 1, handlesPc: true, op: () => rnc(register, conditionBits)},
    "d1": { size: 1, handlesPc: false, op: () => pop(register, RegisterKeys.D, RegisterKeys.E) },
    "d2": { size: 3, handlesPc: true, op: () => jnc(register, conditionBits) },
    "d3": { size: 2, handlesPc: false, op: () => out(register) },
    "d4": { size: 3, handlesPc: true, op: () => cnc(register, conditionBits) },
    "d5": { size: 1, handlesPc: false, op: () => push(register, RegisterKeys.D, RegisterKeys.E)},
    "d6": { size: 2, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(sub8Bit(conditionBits)(register[RegisterKeys.ACC], readArg(register)))},
    "d7": { size: 1, handlesPc: true, op: () => rst2(register, enableInterrupts)},
    "d8": { size: 1, handlesPc: true, op: () => rc(register, conditionBits)},
    "d9": { size: 1, handlesPc: true, op: () => ret(register, conditionBits)},
    "da": { size: 3, handlesPc: true, op: () => jc(register, conditionBits)},
    "db": { size: 2, handlesPc: false, op: () => input(register)},
    "dc": { size: 3, handlesPc: true, op: () => cc(register, conditionBits)},
    "dd": { size: 3, handlesPc: true, op: () => ca(register, conditionBits)},
    "de": { size: 2, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(subWithCarry(conditionBits)(register[RegisterKeys.ACC], readArg(register)))},
    "df": { size: 1, handlesPc: false, op: () => rst3(register, enableInterrupts)},

    "e0": { size: 1, handlesPc: true, op: () => rpo(register, conditionBits)},
    "e1": { size: 1, handlesPc: false, op: () => pop(register, RegisterKeys.H, RegisterKeys.L) },
    "e2": { size: 3, handlesPc: true, op: () => jpo(register, conditionBits) },
    "e3": { size: 1, handlesPc: false, op: () => xthl(register)},
    "e4": { size: 3, handlesPc: true, op: () => cpo(register, conditionBits) },
    "e5": { size: 1, handlesPc: false, op: () => push(register, RegisterKeys.H, RegisterKeys.L)},
    "e6": { size: 2, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(and(conditionBits)(register[RegisterKeys.ACC], readArg(register)))},
    "e7": { size: 1, handlesPc: false, op: () => rst4(register, enableInterrupts)},
    "e8": { size: 1, handlesPc: true, op: () => rpe(register, conditionBits)},
    "e9": { size: 1, handlesPc: true, op: () => assignToRegister16(register, RegisterKeys.PC1, RegisterKeys.PC2)(readRegister16(register, RegisterKeys.H, RegisterKeys.L)())},
    "ea": { size: 3, handlesPc: true, op: () => jpe(register, conditionBits)},
    "eb": { size: 1, handlesPc: false, op: () => xchg(register)},
    "ec": { size: 3, handlesPc: true, op: () => cpe(register, conditionBits)},
    "ed": { size: 3, handlesPc: true, op: () => ca(register, conditionBits)},
    "ee": { size: 2, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(xor(conditionBits)(register[RegisterKeys.ACC], readArg(register)))},
    "ef": { size: 1, handlesPc: false, op: () => rst5(register, enableInterrupts)},

    "f0": { size: 1, handlesPc: true, op: () => rp(register, conditionBits)},
    "f1": { size: 1, handlesPc: false, op: () => popPsw(register, conditionBits) },
    "f2": { size: 3, handlesPc: true, op: () => jp(register, conditionBits) },
    "f3": { size: 1, handlesPc: false, op: () => enableInterrupts.value = false}, 
    "f4": { size: 3, handlesPc: true, op: () => cp(register, conditionBits) },
    "f5": { size: 1, handlesPc: false, op: () => pushPsw(register, conditionBits)},
    "f6": { size: 2, handlesPc: false, op: () => assignToRegister(register, RegisterKeys.ACC)(or(conditionBits)(register[RegisterKeys.ACC], readArg(register)))},
    "f7": { size: 1, handlesPc: false, op: () => rst6(register, enableInterrupts)},
    "f8": { size: 1, handlesPc: true, op: () => rm(register, conditionBits)},
    "f9": { size: 1, handlesPc: false, op: () => assignToRegister16(register, RegisterKeys.SP1, RegisterKeys.SP2)(readRegister16(register, RegisterKeys.H, RegisterKeys.L)())},
    "fa": { size: 3, handlesPc: true, op: () => jm(register, conditionBits)},
    "fb": { size: 1, handlesPc: false, op: () => enableInterrupts.value = true},
    "fc": { size: 3, handlesPc: true, op: () => cm(register, conditionBits)},
    "fd": { size: 3, handlesPc: true, op: () => ca(register, conditionBits)},
    "fe": { size: 2, handlesPc: false, op: () => sub8Bit(conditionBits)(register[RegisterKeys.ACC], readArg(register))},
    "ff": { size: 1, handlesPc: false, op: () => rst7(register, enableInterrupts)},
})